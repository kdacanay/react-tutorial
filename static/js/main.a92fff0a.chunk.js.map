{"version":3,"sources":["Table.js","Form.js","App.js","index.js"],"names":["TableHeader","TableBody","props","rows","characterData","map","row","index","key","name","job","onClick","removeCharacter","Table","Form","initialState","state","handleChange","event","target","value","setState","submitForm","handleSubmit","this","htmlFor","type","id","onChange","Component","App","characters","filter","character","i","className","ReactDOM","render","document","getElementById"],"mappings":"kOAQMA,EAAc,WAChB,OACI,+BACI,4BACI,oCACA,mCACA,yCAUVC,EAAY,SAACC,GAEf,IAAMC,EAAOD,EAAME,cAAcC,KAAI,SAACC,EAAKC,GAEvC,OACI,wBAAIC,IAAKD,GACL,4BAAKD,EAAIG,MACT,4BAAKH,EAAII,KACT,4BACI,4BACIC,QAAS,kBAAMT,EAAMU,gBAAgBL,KADzC,eAOhB,OAAO,+BAAQJ,IA0BJU,EAlBD,SAACX,GAAU,IAKbE,EAAmCF,EAAnCE,cAAeQ,EAAoBV,EAApBU,gBAEvB,OACI,+BACI,kBAAC,EAAD,MACA,kBAAC,EAAD,CACIR,cAAeA,EACfQ,gBAAiBA,M,OCMlBE,E,4MAzDXC,aAAe,CACXN,KAAM,GACNC,IAAK,I,EAGTM,MAAQ,EAAKD,a,EAGbE,aAAe,SAAAC,GAAU,IAAD,EAEIA,EAAMC,OAAtBV,EAFY,EAEZA,KAAMW,EAFM,EAENA,MAEd,EAAKC,SAAL,eACKZ,EAAOW,K,EAOhBE,WAAa,WACT,EAAKpB,MAAMqB,aAAa,EAAKP,OAC7B,EAAKK,SAAS,EAAKN,e,uDAEb,IAAD,EAEiBS,KAAKR,MAAnBP,EAFH,EAEGA,KAAMC,EAFT,EAESA,IAEd,OACI,8BACI,2BAAOe,QAAQ,QAAf,QACA,2BACIC,KAAK,OACLjB,KAAK,OACLkB,GAAG,OACHP,MAAOX,EACPmB,SAAUJ,KAAKP,eACnB,2BAAOQ,QAAQ,OAAf,OACA,2BACIC,KAAK,OACLjB,KAAK,MACLkB,GAAG,MACHP,MAAOV,EACPkB,SAAUJ,KAAKP,eACnB,2BACIS,KAAK,SACLN,MAAM,SACNT,QAASa,KAAKF,kB,GAjDfO,aCsDJC,E,4MAhDXd,MAAQ,CAEJe,WAAY,I,EAQhBnB,gBAAkB,SAAAL,GAAU,IAEhBwB,EAAe,EAAKf,MAApBe,WACR,EAAKV,SAAS,CACVU,WAAYA,EAAWC,QAAO,SAACC,EAAWC,GACtC,OAAOA,IAAM3B,Q,EAOzBgB,aAAe,SAAAU,GACX,EAAKZ,SAAS,CACVU,WAAW,GAAD,mBAAM,EAAKf,MAAMe,YAAjB,CAA6BE,O,uDAMtC,IAEGF,EAAeP,KAAKR,MAApBe,WACR,OACI,yBAAKI,UAAU,aACX,kBAAC,EAAD,CACI/B,cAAe2B,EACfnB,gBACCY,KAAKZ,kBAEV,kBAAC,EAAD,CACIW,aAAcC,KAAKD,oB,GA/CrBM,aCAlBO,IAASC,OAAO,kBAAC,EAAD,MACdC,SAASC,eAAe,U","file":"static/js/main.a92fff0a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n// SIMPLE component\r\n// does not use class keyword\r\n// can use arrow functions\r\n\r\n// make components for Table class: TableHeader and TableBody\r\n\r\nconst TableHeader = () => {\r\n    return (\r\n        <thead>\r\n            <tr>\r\n                <th>Name</th>\r\n                <th>Job</th>\r\n                <th>Remove</th>\r\n            </tr>\r\n        </thead>\r\n    );\r\n};\r\n// passing props are effective way to pass existing data to a component, but component cannot change the props, they are READ ONLY. \r\n// pass props from Table class as parameter, map through the array characters\r\n// pass index from removeCharacter prop as paramater (used as key) so filter knows what item to remove with a button\r\n// onClick function must pass through a function that returns the removeCharacter method\r\n\r\nconst TableBody = (props) => {\r\n\r\n    const rows = props.characterData.map((row, index) => {\r\n        // always use keys when making lists\r\n        return (\r\n            <tr key={index}>\r\n                <td>{row.name}</td>\r\n                <td>{row.job}</td>\r\n                <td>\r\n                    <button\r\n                        onClick={() => props.removeCharacter(index)}>Delete</button>\r\n                </td>\r\n            </tr>\r\n        );\r\n    });\r\n\r\n    return <tbody>{rows}</tbody>;\r\n};\r\n\r\n// CUSTOM CLASS component\r\n// can reuse this component over and over\r\n// a class component must include render() and can only return() one parent element\r\n\r\n\r\nconst Table = (props) => {\r\n\r\n    // removeCharacter must pass down to TableBody, must be passed through again as prop\r\n    // change Table from Class to Simple component\r\n    // just like characterData\r\n    const { characterData, removeCharacter } = props;\r\n\r\n    return (\r\n        <table>\r\n            <TableHeader />\r\n            <TableBody\r\n                characterData={characterData}\r\n                removeCharacter={removeCharacter}\r\n            />\r\n        </table>\r\n    );\r\n};\r\n\r\nexport default Table;\r\n\r\n// note: components can be nested in other components, and simple and class components can be mixed","import React, { Component } from 'react';\r\n\r\n//create Form class to add to table\r\n//set initial state of form to an object of empty strings or properties, then assign to state\r\n//update the state of Form class everytime a field is changed in the form\r\n// with submit, all input data will pass to the App state, which will then update Table\r\n\r\nclass Form extends Component {\r\n\r\n    initialState = {\r\n        name: '',\r\n        job: '',\r\n    };\r\n\r\n    state = this.initialState;\r\n\r\n    // create function that will run everytime a change is made to input (event)\r\n    handleChange = event => {\r\n\r\n        const { name, value } = event.target;\r\n\r\n        this.setState({\r\n            [name]: value,\r\n        });\r\n    };\r\n    // get two properties from state and assign them as values that match form keys\r\n    // run handleChange method as the onChange input\r\n    // submit input method, passes the Form state through as the 2nd character parameter in handleSubmit function on App\r\n    //create button in render to submit\r\n    submitForm = () => {\r\n        this.props.handleSubmit(this.state);\r\n        this.setState(this.initialState);\r\n    };\r\n    render() {\r\n\r\n        const { name, job } = this.state;\r\n\r\n        return (\r\n            <form>\r\n                <label htmlFor='name'>Name</label>\r\n                <input\r\n                    type='text'\r\n                    name='name'\r\n                    id='name'\r\n                    value={name}\r\n                    onChange={this.handleChange} />\r\n                <label htmlFor='job'>Job</label>\r\n                <input\r\n                    type='text'\r\n                    name='job'\r\n                    id='job'\r\n                    value={job}\r\n                    onChange={this.handleChange} />\r\n                <input\r\n                    type='button'\r\n                    value='Submit'\r\n                    onClick={this.submitForm}\r\n                />\r\n            </form>\r\n\r\n        );\r\n    }\r\n}\r\n\r\n// export Form and import in App.js to render \r\n\r\nexport default Form;","import React, { Component } from 'react';\r\nimport Table from './Table';\r\nimport Form from './Form';\r\n\r\n\r\n// STATE is any data that should be saved and modified without being added to a database. state can update data from a component\r\n\r\nclass App extends Component {\r\n\r\n    // state will contain properties for everything you want to store in the state\r\n\r\n    // remove hard-coded characters, able to use state to add characters\r\n\r\n    state = {\r\n\r\n        characters: [],\r\n    };\r\n\r\n    // to remove a character, create method \r\n    // to retrieve state, es6 method for  this.state.characters (destructure)\r\n    // use this.setState() a built in method to manipulate the state\r\n    // filter(creates new) array based on index parameter and return a new array. this method tests an index vs all the indices in the array, returning all but one that is passed through\r\n\r\n    removeCharacter = index => {\r\n\r\n        const { characters } = this.state;\r\n        this.setState({\r\n            characters: characters.filter((character, i) => {\r\n                return i !== index;\r\n            })\r\n        });\r\n    };\r\n    // pass the removeCharacter function through as a prop to Table\r\n    // create function that will update the state by taking existing this.state.characters and adding the new character parameter, using ...spead operator\r\n    // then pass onto Form\r\n    handleSubmit = character => {\r\n        this.setState({\r\n            characters: [...this.state.characters, character]\r\n        });\r\n    };\r\n\r\n\r\n\r\n    render() {\r\n        // will pass this data through to the child component TABLE\r\n        const { characters } = this.state;\r\n        return (\r\n            <div className=\"container\">\r\n                <Table\r\n                    characterData={characters}\r\n                    removeCharacter=\r\n                    {this.removeCharacter}\r\n                />\r\n                <Form\r\n                    handleSubmit={this.handleSubmit}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\n\nReactDOM.render(<App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}